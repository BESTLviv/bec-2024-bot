import { IBotContext } from "../context/context.interface";
import { Markup, Scenes } from "telegraf";
import { educationInlineButton, courseInlineButton, contactInlineButton, workingInlineButton, requestDataInlineButton, whereInlineButton, educationOption } from "../markups/registration.markups";
import { UserModel } from "../database/Schema.class";
import { courseOption, whereOption, workingOption, requestOption } from "../markups/registration.markups";
import { isContactMessage } from "../utils/generaly-utils.functions";
import { generatePDF } from "../utils/generate-pdf";
import path from "path";



function isTextMessage(message: any): message is { text: string } {
    return message && message.text !== undefined;
}

// function async UpdateData(ctx: IBotContext) {
//     const user = await UserModel.findOne({ chatId: ctx.chat?.id });
//     if (user) {
//         Object.assign(user, { ...ctx.session });
//         await user.save();
//     } 
//     else {
//         const user = new UserModel({...ctx.session });
//         await user.save();
//     }
// }


const registrationWizard = new Scenes.WizardScene<IBotContext>(
    'registration-wizard',
    
    async (ctx) => {
        ctx.session.subInfo = ctx.session.subInfo || {};
        await ctx.replyWithPhoto(
            { source: path.join(__dirname, '../../public/registration.jpg') },
            { caption: "–ü—Ä–∏–≤—ñ—Ç, –¥–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è!"});
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫:');
        return ctx.wizard.next();
    },

    async (ctx) => {
        if (isTextMessage(ctx.message)) {
            console.log(ctx.message.text)
            const age = parseInt(ctx.message.text);
            console.log(age.toString(), ctx.message.text)
            if(age.toString() !== ctx.message.text) {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫');
                return;
            }
            if ((isNaN(age) || age < 16 || age > 100)) {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫');
                return;
            } 
            

            await ctx.reply("–ü–æ–≤–∞–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞üòé");
            await ctx.reply("–î–µ –≤—á–∏—à—Å—è?", educationInlineButton);
            return ctx.wizard.next();
        } else {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–∫—É.');
        }
    },

    async (ctx) => {
        if (isTextMessage(ctx.message)) {
            const education = ctx.message.text.trim();
            if (!education) {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è');
                return;
            } 
            if(educationOption[4] == education) {
                await ctx.reply('–ù–∞ –∂–∞–ª—å, –≤ –Ω–∞—à–æ–º—É —ñ–≤–µ–Ω—Ç—ñ —É—á–∞—Å—Ç—å –º–æ–∂—É—Ç—å –±—Ä–∞—Ç–∏ –ª–∏—à–µ —Å—Ç—É–¥–µ–Ω—Ç–∏.');
                return;
            }
            if(educationOption[5] == education) {
                await ctx.reply('–¢–æ–¥—ñ –≤–ø–∏—à–∏ –º–µ–Ω—ñ –¥–µ —Ç–∏ –≤—á–∏—à—Å—è.');
                return;
            }

            ctx.session.subInfo.education = education;
            await ctx.reply('–ù–∞ —è–∫—ñ–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–≤—á–∞—î—à—Å—è?', Markup.removeKeyboard());
            return ctx.wizard.next();
        } else {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è.');
        }
    },

    async (ctx) => {
        if (isTextMessage(ctx.message)) {
            const specialization = ctx.message.text.trim();
            if (!specialization) {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å.');
                return;
            } 
            ctx.session.subInfo.specialization = specialization;
            await ctx.reply('–ö—Ä—É—Ç–∏–π –≤–∏–±—ñ—Ä!');
            await ctx.reply('–ê –Ω–∞ —è–∫–æ–º—É –∫—É—Ä—Å—ñ –∑–∞—Ä–∞–∑?', courseInlineButton);
            return ctx.wizard.next();
        } else {
            await ctx.reply('–ù–∞ —è–∫—ñ–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–≤—á–∞—î—à—Å—è?');
        }
    },

    async (ctx) => {
        if (isTextMessage(ctx.message)) {
            const text = ctx.message.text.trim();
            if (text) {
                if(courseOption[5] == text) {
                    await ctx.reply('–¢–æ–¥—ñ –≤–ø–∏—à–∏ –º–µ–Ω—ñ –Ω–∞ —è–∫–æ–º—É –∫—É—Ä—Å—ñ —Ç–∏ –∑–∞—Ä–∞–∑.');
                    return;
                }

                ctx.session.subInfo.course = text;
                // await ctx.reply('–ï—Ö, –º–æ–ª–æ–¥—ñ—Å—Ç—å...');
                await ctx.reply(`–ó–≤—ñ–¥–∫–∏ –¥—ñ–∑–Ω–∞–≤—Å—è/–ª–∞—Å—å –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è?`, whereInlineButton);
                return ctx.wizard.next();
            } else {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫—É—Ä—Å.');
            }
        } else {
            await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.');
        }
    },

    // Step 6: Handle where
    async (ctx) => {
        if (isTextMessage(ctx.message)) {
            const text = ctx.message.text.trim();
            if (text) {
                if(whereOption[3] == text) {
                    await ctx.reply('–¢–æ–¥—ñ –≤–ø–∏—à–∏ –º–µ–Ω—ñ –¥–µ —Ç–∏ –¥—ñ–∑–Ω–∞–≤—Å—è/–ª–∞—Å—å –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è.');
                    return;
                }

                ctx.session.subInfo.where = text;
                await ctx.reply('–î—è–∫—É—é, —â–æ –ø–æ–¥—ñ–ª–∏–≤—Å—è/–ª–∞—Å—å!');
                await ctx.reply('–ß–∏ –ø—Ä–∞—Ü—é—î—à –∑–∞—Ä–∞–∑ –≤ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—ó?', workingInlineButton);
                return ctx.wizard.next();
            } else {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.');
            }
        } else {
            await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –∑–≤—ñ–¥–∫–∏ –¥—ñ–∑–Ω–∞–ª–∏—Å—è –ø—Ä–æ –∑–º–∞–≥–∞–Ω–Ω—è.');
        }
    },

    // Step 7: Handle working
    async (ctx) => {
        if (isTextMessage(ctx.message)) {
            const text = ctx.message.text.trim();
            if (text) {
                ctx.session.subInfo.isWorking = text;
                await ctx.reply('–Ø—Å–Ω–µ–Ω—å–∫–æ, –±—É–¥—É –∑–Ω–∞—Ç–∏!');
                await ctx.reply(`–¢–µ–ø–µ—Ä –¥–∞–≤–∞–π –æ–±–º—ñ–Ω—è—î–º–æ—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏`, contactInlineButton);
                return ctx.wizard.next();
            } else {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –æ–ø—Ü—ñ—é.');
            }
        } else {
            await ctx.reply('–í–≤–µ–¥—ñ—Ç—å —á–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –∑–∞—Ä–∞–∑ –≤ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—ó.');
        }
    },

    // Step 8: Handle contact
    async (ctx) => {
        if (isContactMessage(ctx.message)) {
            const contact = ctx.message.contact;

            console.log(ctx.from?.username)       
            ctx.session.subInfo.phone = contact.phone_number || '';
            await ctx.reply(`–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç! –û—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∏ –Ω–∞—à–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞: @ruslan_yavir`, Markup.removeKeyboard());
            await ctx.reply("–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.");
            return ctx.wizard.next();
        } else {
            await ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ.');
        }
    },

    // Step 9: Handle email
    async (ctx) => {
        if (isTextMessage(ctx.message)) {
            const email = ctx.message.text.trim();
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            
            if (!emailRegex.test(email)) {
                await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –ø–æ—à—Ç—É.');
            } else {
                ctx.session.subInfo.email = email;
                await ctx.reply('–î—è–∫—É—é –∑–∞ —Ç–∞–∫–µ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!');
                await ctx.reply(`–ó–∞–ª–∏—à–∏–ª–æ—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞–¥–∞—Ç–∏ –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö\n–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ —ñ–≤–µ–Ω—Ç—É:`, requestDataInlineButton);
                const filePath = path.join(__dirname, '../../public/–ü—Ä–∞–≤–∏–ª–∞.pdf');
                await ctx.replyWithDocument({ source: filePath })
                return ctx.wizard.next();
            }
        } else {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É.');
        }
    },

    async (ctx) => {
        if (isTextMessage(ctx.message) && requestOption.includes(ctx.message.text)) { // Assuming the user clicks an inline button for consent
            ctx.session.isRegistered = true;
            const user = await UserModel.findOne({ chatId: ctx.chat?.id });
            if (user) {
                Object.assign(user, { ...ctx.session });
                await user.save();
            } 
            else {
                const user = new UserModel({...ctx.session });
                await user.save();
            }
            
            // await ctx.reply("–°—É–ø–µ—Ä, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å!", Markup.removeKeyboard());
            await ctx.replyWithPhoto(
                { source: path.join(__dirname, '../../public/start.jpg') },
                { caption: "–°—É–ø–µ—Ä, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å!"},);
           
            await ctx.scene.enter('after-registration-menu-wizard');
        } else {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.');
        }
    }
);

export default registrationWizard;
